Часть 1: Реализация графа
Создайте класс для представления узла графа (GraphNode). Узел должен содержать следующие поля:
Уникальный идентификатор узла.
Список смежных узлов (соседей).

Создайте класс для графа (Graph). Граф должен содержать следующие методы:
Метод для добавления нового узла в граф.
Метод для добавления ребра между двумя узлами.
Метод для удаления узла из графа.
Метод для удаления ребра между двумя узлами.
Метод для проверки наличия узла в графе.
Метод для получения списка смежных узлов для заданного узла.
Метод для очистки графа (удаление всех узлов и рёбер).
Часть 2: Применение графа
Рассмотрим задачу: "Поиск кратчайшего пути между двумя узлами в графе". Используя вашу реализацию графа, создайте систему для поиска кратчайшего пути между двумя узлами.

Реализуйте метод, использующий алгоритм поиска в ширину (BFS) для нахождения кратчайшего пути между двумя узлами в графе.

Проверьте работу вашей системы, создав простой граф и находя кратчайший путь между двумя узлами.
Часть 3: Тестирование
Напишите набор тестов для проверки корректности работы вашей реализации графа и системы поиска кратчайшего пути. Тесты должны включать в себя:
Добавление и удаление узлов из графа.
Добавление и удаление рёбер между узлами.
Поиск кратчайшего пути между двумя узлами.
Проверку наличия или отсутствия узлов в графе.
Проверку состояния графа после различных операций.

Проведите тестирование и убедитесь, что ваша реализация работает корректно, обеспечивает правильное выполнение всех операций и эффективно находит кратчайший путь в графе.







